ERİŞİM BELİRLEYİCİLER

private --> Sadece classın içinden erişilebilir.Dışardan erişilemez.(Default-varsayılan) olarak bu kullanılır.
Main kısımdan erişilemez.

protected --> Sadece class içerisinde ve miras alan classlar içerisinde erişilebilir.Main kısımdan erişilemez.

public --> Her yerden erişilebilir.

KAVRAMLAR

-Encapsulation

- Polymorphism (Çok Biçimlilik)
Bir nesnenin farklı durumlar karşısında farklı davranışlar ve sonuçlar üretmesidir.Reelden örnek vermek
gerekirse biz anne ve babamız için bir çocuğuz.Üniversitede hocalar karşısında bir öğrenciyiz.İş yerin
de patron için bir çalışanız gibi.
compile time - function overloading & operator overloading
run time - function overriding

- Function Overriding (Fonksiyonların Çiğnenmesi)
Diyelimki B A dan miras alsın ve A da void print() fonksiyonu var bunu B nin içinde aynı isimle
void print() ile tanımladığımız zaman artık print fonksiyonunu override etmiş ezmiş olduk artık B sını
fında kullanılan print fonksiyonu override etmiş olduğumuz fonksiyondur.
* Fonksiyon ismi ve parametresi aynı olmalıdır Function override diyebilmek için

CONSTRUCTORS

Constructorlar 2 çeşittir parametre almayan(default constructor) ve parametre alan costructor.
Biz bir constructor ataması yapmasakda c++ varsayılan olarak bir constructor ataması yapmaktadır biz görmesekte.
Constructor demek mainde bir nesne oluşturulunca o nesnenin ilk olarak
mainde olusturulduğunda çalışan yapıdır.Erişim için publicte
tanımladık.Her zaman classın ismiyle tanımlanırlar örnegin public altında "Student();"
Student Student[5]; //şeklinde array ile çalıştırılabilirler.

PARAMETRELİ CONSTRUCTOR

Diyelimki classta 2 adet cons tanımladın birisi parametre almayan öbürü parametre alan cons.Mainde nesneyi
parametreli olarak çağırırsan otomatikmen parametreli olan constructor ı alıp çalıştıracaktır.Nesneye parametre
vermezsende gidip parametresiz constructoru çalıştıracaktır.
örnek  mainde  Student Student1(x,x,x); --> burda parametreli constructor çalıştırır
			   Student Student1; --> burada parametresiz constructor çalışır

Diyelimki mainde Student Student1(x); Böyle bir parametreli constructor çalıştırmak istedin çalışması için
1 parametre içeren constructorun sınıfta tanımlı olması gerekiyor yoksa çalışmaz.



DESTRUCTORLAR

Nesne kaybolunca çalışırlar.Classta sadece birer tane tanımlanabilir.
~Student(); diye tanımlanırlar classta.Parametre almazlar.
Diyelimki mainde şöyle bişi yazdık
	if(true)
	{
		Student Student5;
	{
		Burada lokal bir nesne olmuş oluyor blop bittiği an destructor çalışır.Yani destructor nesne yok
		olduğu an çalışır.


COPY CONSTRUCTOR

Student(const Student& oth); //copy constructor Class içinde boyle tanımlanırlar.Bir nesne oluştururken
oluşturulmuş bir nesnenin değerlerini kopyalayarak yeni bir nesne oluşturmamıza yararlar.
mainde örnek
	Student Student1("Muhammet");
	Student Student2(Student1);
	Student2.displayInformation(); // Olusturdugumuz Student1 nesnesininin bilgilerini kopyalayarak Student2
	nesnesini olusturduk

INHERITANCE (Miras)

Var olan sınıftan başka sınıflar türetmeyi ve bu türetme aşamasında bazı özellik ve fonksiyonları aktar
ma işlemidir.Mesela biz dünyaya gelirken anne ve babadan özellikler aldık gibi düşünülebilir.Birden faz
la sınıftanda miras alınabilir yani :D
Sınıflar arasında alt üst ilişkisi sağlar
Mesela hayvan sınıfı ürettik oraya ortak özellikler yazdık sonra o sınıftan miras alarak kedi sınıfını
nı ürettik oraya kediye özel olanları yazdık, hayvan sınıfından miras alarak köpek ürettik gibi.
* Priavate olanlar miras verilemezler
* Üst sınıfın Constructor ve destructor miras alınamazlar bir şekilde kullanılabilirler.
* Üst sınıfın friend fonksiyonları miras alınamaz
* Üst sınıftaki eşitlikleri miras alamayız

- Syntax yapısı

class baseClass 
{
protected:
	int x;
public:
	void setXValue(int mainX)
	{
		x = mainX;
	}
	int getXValue()
	{
		return x;
	}
	void print()
	{
		cout << "X = " << x << endl;
	}
};

class derivedClass :public baseClass
{

};

int main()
{

	derivedClass obj1; /* Base classtan miras aldıgımız için onun fonksiyonlarıne erişebişiyoruz
	x değişkeninide aldık ama protected oldugu için mainden erişememiz normal yani obj1.x yapamıyoruz*/
	obj1.setXValue(5);
	obj1.print(); // X=5 degerini verdi

- Inheritance acces levels

class derivedClass :public baseClass > acces level burda public olarak tanımladık
Eğer boş bıraksaydık priavate olarak default tanımlanacaktı
Priavate olursa miras alınan classtaki protected ve public olan özellik ve fonksiyonlar miras alan clası
mızın içinde priavate olarak tanımlanırlar.
Protected olursa miras alınan classtaki public ve protectedlar protected olarak alınırlar.
Public olursa protectedlar protected olarak alınır publicler public olarak alınırlar.

- Miras alma işleminde constructor destructor ve c.const. mantıgı

int main()
{
	baseClass base1;
	derivedClass obj1; 

çıktımız şöyle olucaktır
baseClass Constructor worked
baseClass Constructor worked
derivedClass Constructor worked
derivedClass Destructor worked
baseClass Destructor worked
baseClass Destructor worked

Önce baseclass ın constu , sonrasında derived classın miras aldığı baseClassın içindeki constructor
sonra derivedin kendi constu çalışır. Destructor da durum tam tersidir önce obj1 in desti sonra obj1
içinde bulunan baseClass desti sonrada ilk başta olan base1 in desti çalışmıştır.

Copy constructor mantıgı ise söyle

int main()
{
	
	derivedClass obj1(3, 5);
	derivedClass obj2(obj1);

çıktı şu şekildedir

baseClass Constructor worked
derivedClass Constructor worked
baseClass Constructor worked
derivedClass copy-const. worked
derivedClass Destructor worked
baseClass Destructor worked
derivedClass Destructor worked
baseClass Destructor worked

önce obj1 baseClass const sonra obj1 const sonra obj2 baseClass const sonra copy constructor çalıştı
sonra obj2 için derived dest sonra baseDest sonrasında obj1 için derived dest ve baseDest çalışmıştır.

* derivedClass içinde constructorda farklı bir gösterim yapısı

derivedClass(int mainX = 0, int mainY = 0):baseClass (mainX) -> burada
	{
		// x=mainX yok onu :baseClass (mainX) yaparak sağlamış olduk
		y = mainY; 
		cout << "derivedClass Constructor worked" << endl;
	}

- Multiple Inheritance (Birden fazla sınıftan miras alma )

Syntax yapısı

A ve B sınıfı oluşturduk ve A ve B den public level miras alan bir C sınıfı oluşturuldu aşağıda

class CClass:public AClass,public BClass
{

}
 
 Mainde bir nesne oluşturup çalıştırırsak

 int main()
{
	
	CClass cObject;

AClass constructor worked
BClass constructor worked
CClass constructor worked
CClass destructor worked
BClass destructor worked
AClass destructor worked       

çıktı bu şekilde olur.

* A B ve C classı oluşturdk C, A ve B den miras aldı A da x B de y değişkeni vardı public olarak C public
olarak miras aldı.Şimdi C sınıfı içerisindeki oluşturduğum 3 parametreli constructoru incele

class CClass:public AClass,public BClass //Multipled Class

CClass(int c1,int c2,int c3):AClass(c3),BClass(c2)
	{
		z = c1;
		cout << "CClass constructor worked" << endl;
	}

DYNAMIC MEMORY

﻿#include "dynamicMemory.h"

int main()
{
    Example exObj, * exPtr;//one of them is object and second is pointer.Burada exobj üretirlirken ve
	yok edilirken const ve destructor çalışır ama pointer için geçerli değildir.
    exPtr = &exObj;//exPtr points to exObj.
                    //exPtr store the address  of exObj.
    exObj.x = 5;
    exObj.y = 15;
    exObj.print();

    (*exPtr).x = 12;// ( ) used because dot operator has higher precedence than dereferencing operator 
    exPtr->y = 13;//use member access operator arrow (->)
    exPtr->print();

    //to create dynamic variables using pointer, we can use new and delete operators.
    //we can allocate two types;single variable or array of variables.
    //for the integer type.
    int *ptr = new int;//creates a variable during program execution somewhere in memory, and stores address of allocated memory in ptr.
    Example* ptrEx = new Example;
    ptrEx->x = 2;
    ptrEx->y = 10;
    ptrEx->print();
    delete ptrEx;


    //Single-Dim.
    int* ptrArray = new int[5];
    Example* ptrExArray = new Example[5];
    for (int i = 0; i < 5; i++) {
        ptrExArray[i].x = i;
        ptrExArray[i].y = i * i;
        ptrExArray[i].print();
    }
    delete[] ptrExArray;

    
    //Multi-Dim.
    int** Array2D = new int* [5];
    Example** ExampleArray2D = new Example* [5];

    for (int i = 0; i < 5; i++) {
        ExampleArray2D[i] = new Example[5];
    }
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            ExampleArray2D[i][j].x = i;
            ExampleArray2D[i][j].y = j;
            ExampleArray2D[i][j].print();
        }
    }
    
    for (int i = 0; i < 5; i++) {
        delete[] ExampleArray2D[i];
    }
    delete[] ExampleArray2D;
}

* New keyworduyle yer ayırtırsan delete ile temizlemen gerekir.

Example* exptr = new Example;
	exptr->x = 5;
	exptr->y = 3;
	exptr->print();
	delete exptr;

DİNAMİK TEK BOYUTLU DİZİ

Example* exArrayPtr = new Example[5];
	for (unsigned i = 0; i < 5; i++)
	{
		exArrayPtr->x = i;
		exArrayPtr->y = i * i;
		exArrayPtr->print();
	}
	delete[] exArrayPtr;


DİNAMİK 2 BOYUTLU DİZİ

int** ptr2dArray = new  int*[5]; // Burada pointer to pointer yani pointerları tutan bir pointer oluş
turduk yani bu dizi pointer dizilerini tutmaktadır 2. boyutlu oluyor.
	for (int i = 0; i < 5; i++)
	{
		ptr2dArray[i] = new int[5]; //Burada pointerımızın tuttuğu pointerlarada bellek ataması yapmış
		olduk artık **ptr2dArrayda bulunan pointerlar 5 int lik yer ayrılmış bulunmakta bellekte
	}
	for (int i = 0; i < 5; i++)
	{
		for (int j = 0; j < 5; j++)
		{
			ptr2dArray[i][j] = i + j;
		}
	}
	for (int i = 0; i < 5; i++) // çıktı için 
	{
		for (int j = 0; j < 5; j++)
		{		
			cout << ptr2dArray[i][j] << " ";
		}
		cout << "" << endl;
	}
	delete[] ptr2dArray;

*Class - object örneği

Example** ex2dArray = new  Example * [5];
	for (int i = 0; i < 5; i++)
	{
		ex2dArray[i] = new Example[5];
	}
	for (int i = 0; i < 5; i++)
	{
		for (int j = 0; j < 5; j++)
		{
			ex2dArray[i][j].x = i;
			ex2dArray[i][j].y = j;
			ex2dArray[i][j].print();
		}
	}
	for (int i = 0; i < 5; i++)
	{
		delete[] ex2dArray[i]; // önce ** in içindeki * leri temizledik
	}
	delete[] ex2dArray;  // en son ** i temizledik bellekten


THIS POINTER KAVRAMI

Her nesne oluşunca onun bir this pointerı oluşturulur.

Example classından bir örnek 

class Example 
{
public:
	Example(int mainX,int mainY) 
	{
		x = mainX;
		y = mainY;
		cout << "Constructor work." << endl;
	}
	~Example() 
	{
		cout << "Destructor work." << endl;
	}
	int x, y;
	void print();
	Example addExample(Example& oth)
	{
		x = x+oth.x;
		y = y+oth.y;
		return *this;
	}
};
main()
Example obj1(3, 3), obj2(4, 5);
	obj1.addExample(obj2);
	obj1.print();

burda direk obj1 döndürülüyor this sayesinde

UPCASTING KAVRAMI

Upcasting kavramı base sınıfından miras alan bir sınıftan oluşturulan nesneyi
base sınıfının pointerı ile yönetme işlemidir.

Upcasting işlemi syntax yapısı mainde aşağıdaki örnekte

Employee* emp1;
Manager obj1("Muhammet", "HANEDAN", 30000, "GameDev");
emp1 = &obj1; // upcasting uygulandı
emp1->displayInformation();

Çıktı
	Name:Muhammet
	Surname:HANEDAN
	Salary:30000

Dikkat edilmesi gereken şu upcasting işleminde emp1 pointerından sadece base classta olan yani
Employee clasıın üyelerine erişilebilir miras alan nesnede olup base classta olmayan üyelere erişilemez
*emp1 pointerından.

DOWNCASTING KAVRAMI

Downcasting kavramı base classın pointerını miras alan sınıfın pointerı haline dönüştürme işlemidir.

	Employee* emp1;
	Manager obj1("Muhammet", "HANEDAN", 30000, "GameDev");
	emp1 = &obj1;
	Manager* mng2;
	mng2 = (Manager*)emp1; // Burda uygulamış olduk
	mng2->displayInformation(); // Artık Manager sınıfının tüm üyelerine erişebiliriz.

Çıktı şu şekilde olur 
	Name:Muhammet
	Surname:HANEDAN
	Salary:30000
	Department:GameDev

VIRTUAL FUNCTION (SANAL FONKSİYON) KAVRAMI

Derleme aşamasında değil çalışma aşamasında karar verilen bir işlemdir.Base sınıfta yani miras veren
sınıfta virtual olması istenen fonksyionun önüne virtual keywordu eklenerek yapılır.Sadece miras veren
sınıfta yapılması yeterlidir.Yani dil classta fonksiyonda virtual keywordunu görünce bu fonksiyon mainde
hangi objeden çağırılırsa o objenin sınıfındaki fonksiyon çağırılır.B A dan miras alsın 2 sindede print
fonksiyonu olsun A da virtual print olarak tanımlı mainde B den oluşturulan nesneden çağırılırsa B deki
print fonksiyonu çalıştırılır.

Örnek olarak

class Employee 
{
public:
	string empName, empSurname;
	double empSalary;
	Employee(string name, string surname, double salary);
	virtual void displayInformation() // Buraya dikkat 
	{
		cout << "Name:" << empName << endl;
		cout << "Surname:" << empSurname << endl;
		cout << "Salary:" << empSalary << endl;
	}
};
Employee::Employee(string name, string surname, double salary) 
{
	empName = name;
	empSurname = surname;
	empSalary = salary;
}


class Manager :public Employee 
{
public:
	string mngDepartment;
	Manager(string name, string surname, double salary, string department) :Employee(name, surname, salary) 
	{
		mngDepartment = department;
	};
	void displayInformation() 
	{
		Employee::displayInformation();
		cout << "Department:" << mngDepartment << endl;
	}
	void increaseSalary() 
	{
		empSalary += 200;
	}
};

Mainde
	Employee* emp1;
	Manager obj1("Muhammet", "HANEDAN", 30000, "GameDev");
	emp1 = &obj1;
	emp1->displayInformation();
	Eğer virtual keywordu koymasaydık çıktıda manager sınıfına software değişkenine ait GameDev çıktıda
	olmayacaktı çıktı şu şekildedir

	Name:Muhammet
	Surname:HANEDAN
	Salary:30000
	Department:GameDev


** Virtual fonksiyonların özelliklerini gösterebilmeleri için ya reference ile yada pointer ile çağı
rılmaları kesinlikle gereklidir.Value ile çağırılan fonskyionlarda virtual özelliği çalışmaz.

Bunun için yaptıgımız örnek asagıdadır.


	Employee emp1 ("Muhammet","HANEDAN",30000);
	Manager mng1("Muhammet", "HANEDAN", 30000, "GameDev");

	
	Employee *emp2 =new Employee("Muhammet","HANEDAN", 30000);
	Manager *mng2=new Manager("Muhammet", "HANEDAN", 30000, "GameDev");

	/*
	void print(Employee &employeType) 
{
	employeType.displayInformation();
}
void print2(Employee* employeeType)
{
	employeeType->displayInformation();
}
void print3(Employee employeeType)
{
	employeeType.displayInformation();
}
*/
	cout << "PASS BY REFERENCE " << endl;
	print(emp1);
	print(mng1);
	cout << "---------------" << endl;
	cout << "PASS BY POINTER " << endl;
	print2(emp2);
	print2(mng2);
	cout << "---------------" << endl;
	cout << "PASS BY VALUE " << endl;
	print3(emp1);
	print3(mng1);

VIRTUAL DESTRUCTOR KAVRAMI

Diyelimki upcasting işlemi uyguladık aşağıdaki gibi

Employee* emp2 = new Manager("Muhammet", "HANEDAN", 30000, "GameDev");

Employee base class Manager devired classtır.
Şimdi upcasting işlemi ile oluşuturduğumuz bu nesneyi silmek istediğimizde delete işleminden sonra gör
düğümüz şey sadece Employe clasın destrocutorunun çalıştığı Managerin destructorunun çalışmadığıdır bu
yüzden destructor tanımlanırken base classta destructorun önüne virtual keywordu getirilierek bu sorun
halledilmiş olur.

class Employee 
{
public:
	string empName, empSurname;
	double empSalary;
	Employee(string name, string surname, double salary);
	Employee();
	virtual ~Employee() // Burada
	...

PURE VIRTUAL FUNCTION VE ABSTRACT CLASS (SOYUT SINIF) KAVRAMLARI

class Animal
{
public:
	virtual void talk() = 0; //Bunun ile soyut sınıf yaptık.Pure virtual fonksiyondur.
};
Bu bir soyut sınıf olmuştur.Bu sınıftan nesne üretilemez ama pointer oluşturulabilir.İçerisinde pure
olmayan fonksiyonlar ve değişkenler tutabilir.Amaç bunun altında yeni sınıflar oluşturup tek çatı altın
da toplamaktır.

class Animal
{
public:
	virtual void talk() = 0;
	virtual ~Animal()
	{
		cout << "Animal destructor worked" << endl;
	}
	virtual void ömer()
	{
		cout << "Ben kucuk bir omer" << endl;
	}
};

class Dog :public Animal
{
public:
	~Dog()
	{
		cout << "Dog destructor worked" << endl;
	}
	void talk()
	{
		cout << "hav hav" << endl;
	}
	void ömer()
	{
		cout << "Omer kOpek aldi" << endl;
	}
};

class Cat :public Animal
{
public:
	~Cat()
	{
		cout << "Cat destructor worked" << endl;
	}
	void talk()
	{
		cout << "Meov" << endl;
	}
	void ömer()
	{
		cout << "Omer kedi aldi" << endl;
	}
};

class Duck :public Animal
{
public:
	~Duck()
	{
		cout << "Duck destructor worked" << endl;
	}
	void talk()
	{
		cout << "Vak vak vak" << endl;
	}
	void ömer()
	{
		cout << "Omer ordek aldi" << endl;
	}
};

İlgili örnek mainde

	
	Dog* dogAnimal = new Dog();
	Cat* catAnimal = new Cat();
	Duck* duckAnimal = new Duck();
	
	Animal* animalObject[] = { dogAnimal,catAnimal,duckAnimal };
	for (int i = 0; i < 3; i++)
	{
		animalObject[i]->talk();
		animalObject[i]->ömer();
		delete animalObject[i];
	}

OPERATÖRLERİN AŞIRI YÜKLENMESİ

Classları tanımlayınca nesneler için hazır gelen iki operatör vardı . ve = operaötürleri.Aşırı
yüklemede 2 sebebimiz var.İlki bu operatörlerden başka operatörleride nesneler üzerinde hazır 
kullanılabilir hale getirmek. 2. sebebi ise operatörlerin tanımını isteğimiz doğrultusunda yenilemek
değiştirmek.Kendimize yeni bir operatör oluşturamayız.Örnek olarak kisi diye sınıf tanımladık ve ++ ope
ratörünü kisi sını içindeki yas değişkenini arttırması için ayarlayabilirz kisi ++ yapınca o işlemi yapar
Var olan operatörlerin birbirlerine olan öncelik
leride değiştirilemez.Operatorlerin aldığı argüman sayısıda değiştirilemez mesela == bir sağ bir de solu
na argüman alır.

Bazı operatörler overload edilemezler 6 adet
1.Scope resolution operator (::)
2.Pointer to member operator (.*)
3.Member acces or Dot operator (.)
4.Ternary or Conditional operator (?:)
5.Object size operator (sizeof)
6.Object type operator (typeof)

İlk örneğimiz konu ile ilgili

class Person
{
private:
	string personName, personSurname;
	int personAge;
public:
	Person()
	{
		personName = "";
		personSurname = "";
		personAge = 0;
	}
	Person(string name, string surname, int age)
	{
		personName = name;
		personSurname = surname;
		personAge = age;
	}
	virtual ~Person()
	{
		cout << "Person destructed" << endl;
	}
	virtual void displayPerson();
	bool operator ==(Person& oth); // == operatorunu yaptık
	void operator++(); // ++ operatorunu yaptık
};

void Person::displayPerson()
{
	cout << personName << endl;
	cout << personSurname << endl;
	cout << personAge << endl;
}

bool Person::operator==(Person& oth)
{
	return(personName == oth.personName && personSurname == oth.personSurname);
}

void Person::operator++()
{
	personAge = personAge + 1;
}

Person person1("Muhammet", "HANEDAN", 25);
	Person person2("Batuhan", "KAYA", 25);
	person1 == person2 ? cout << "Same person" << endl : cout << "Not same person" << endl;
	++person1;
	person1.displayPerson();


FRIEND FUCNTION KAVRMAI

Friend fonksiyonlar sınıfta friend keywordu ile tanımlanırlar Örnek

friend void PersonFriend(Person& othPerson)
	{

	}

Friend fonksiyonlar sınıfın tüm üyelerine erişebilirler.Ancak erişimi direkt
olarak yapamazlar ve bir nesne üzerinden erişim sağlarlar.
Bazı operatörler sadece friend fonksiyonlar ile aşırı yük
lenebiliyorlar.Mesela örnek

friend bool operator!=(Person& firstobject, Person& secondobject)
	{
		return!(firstobject.personName == secondobject.personName && firstobject.personSurname == secondobject.personSurname);
	}

Özellikle input ve output operatorleri >> << sadece nonmember fonk yani friend fonk ile aşırı yüklenebi
liyorlar.

FUNCTION TEMPLATE KAVRAMI

Diyelimki max ı döndüren bir fonksiyon yazacağız.Dönüş veri tipleri int , double , char , string tipinde
olacak 4 fonksiyon yazabiliriz.Bunları yazmadan bir template yazarsak eğer foksiyonlar çağırılınca o 
templateye uyarak kendi veri tiplerine göre davranırlar yani templateyi bir şablon olarak düşünebilirsin
Örnek olarak aşağıda gösterdik

int getMax(int a, int b)
{
	if (a > b)
		return a;
	return b;
}
double getMax(double a, double b)
{
	if (a > b)
		return a;
	return b;
}
char getMax(char a, char b)
{
	if (a > b)
		return a;
	return b;
}
string getMax(string a, string b)
{
	if (a > b)
		return a;
	return b;
}

**Böyle yapacağımıza template kullabiliriz aşağıdaki gibi

template <class Type>
Type getMax(Type a, Type b)
{
	if (a > b)
		return a;
	return b;
}

CLASS TEMPLATE KAVRAMI

Class template ise yukarda anlattığımız function template gibi düşünebilirsin örnek olarak syntax yapısı
ve mainde nasıl yazıldığı gösterildi aşağıda

template <class Type>
class Number
{
private:
	Type data;
public:
	Number(Type mainData = 0)
	{
		data = mainData;
	}
	Type getData()
	{
		return data;
	}
	Type operator+ (const Number& oth);
	void display()
	{
		cout << data << endl;
	}
};

template <class Type>
Type Number<Type>::operator+(const Number& oth)
{
	return data + oth.data;
}

	Number<int> numberInt(1);
	cout << numberInt.getData() << endl;
	Number<double> numberDouble(5.5);
	cout << numberDouble.getData() << endl;
	Number<string> numberString("HANEDAN");
	cout << numberString.getData() << endl;

	Number<int> number1(5);
	number1.display();
	Number<int> number2(6);
	number2.display();
	cout<< number1 + number2;


HATA YAKALAMA (EXCEPTION HANDLING)

1.Assert fonksiyonu

Assert fonksiyonu içine aldığı koşul gerçekleşmezse programı durdurur.Programdan çıkılır.Örnek

	float pay, payda, result;
	cin >> pay; cin >> payda;
	assert(payda != 0);
	result = pay / payda;
	cout << result

2.Try Catch Yapısı

Hata yakalama mekanizmasıdır.Hata alabileceğimizi düşündüğümüz kısımları try bloğunun içine yazarız.
Ve orda kontrol ederiz.Assertten farkı şudur catch bloğundan sonra program çalışmaya devam eder.Prog
ramı ordan sonra durdurmaz.

	
	float pay, payda, result;
	string str = "Payda 0 olamaz";
	
	try
	{
		cout << "Enter pay" << endl;
		cin >> pay;
		cout << "Enter payda" << endl;
		cin >> payda;

		if (payda == 0)
		{
			throw str;
		}
		else if (payda < 0)
		{
			throw payda;
		}
		else // Default catch i çalıltırdı
		{
			throw 15;
		}

		result = pay / payda;
		cout << result;
	}
	catch (string x) // görüldüğü gibi throwlanan veriye göre catchlenir
	{
		cout << x << endl;
	}
	catch (float x) // float veriyi catchler
	{
		cout << x << " bu sayi 0 dan kucuktur" << endl;
	}
	catch (...)	//Eğer throw dönüşüne uygun catch bulunmazsa bu çalışır.En altta yazılır.
	{
		cout << "Default cahtch worked" << endl;
	}

	HATA SINIFI OLUŞTURMA ÖRNEĞİ




--------------------------------------------------------

NOTLAR

İf else kısa kullanımı ornegi
int a = 7;
a > 6 ? cout << "t" : cout << "f";
mainde bunu yaparsak t yazar.

CLASSTA class donusumu fonksiyon
class
complexNumber addComplex(const complexNumber& oth);
complexNumber substractComplex(const complexNumber& oth);

Fonk tanımlamaları ornek
complexNumber complexNumber::addComplex(const complexNumber& oth)
{
	complexNumber result;
	real = real + oth.real;
	imag = imag + oth.imag;
	return result;
}***** eğer fonksiyonun dönüş tipi senin sınıfınla aynı ise orda bir copy constructor çalışır ->return edince





ÖNEMLİ NOTLAR

POINTER MANTIGINI İYİ ANLAMAK LAZIM C++ == POİNTER GİBİ :D

Aşağıda pointerları daha iyi kavramak için bir örnek yaptım

	int* data = new int[5];     //data pointerımıza bellekte 5 int lik yer ayırdık
	for (int i = 0; i < 5; i++) //data pointerımıza değerleri verdik
	{
		data[i] = i;
	}
	int* temp_data = new int[10];//temp_data diye pointer oluşturduk 10 int lik
	for (int i = 0; i < 5; i++)  //temp_data ya data daki değerleri verdik  şu an bu değerler ramde farklı yerlerde tutulmakta
	{
		temp_data[i] = data[i];
	}
	cout << "&temp_data[0] = " << &temp_data[0] << endl; //adresi verir
	cout << "&data[0] = " << &data[0] << endl;           //adresi verir
	cout << "temp_data[1] = " << temp_data[1] << endl;      //1 degerini verir
	cout << "temp_data[5] = " << temp_data[5] << endl;     //karmaşık bi değer verdi çünkü 5.indexi girmedik
	temp_data[5] = 22; //5. indexi girdik
	cout << "delete data [] activated" << endl;
	delete[] data;//data pointerının ramde tuttugu adresi rame iade ettik attık data pointeri bir yer göstermiyor
	cout << "data = temp_data command has been given" << endl;
	data = temp_data;// data pointerımız temp_data pointerinin gösterdiği yeri gösteriyor artık
	cout << "&data[0] = " << &data[0] << endl; // data=temp_data yaptıgımız için ilk satırdaki adresi verecektir
	cout << "data[0] = " << data[0] << endl; // 0
	cout << "temp_data[0] = " << temp_data[0] << endl; // 0
	cout << "data[1] = " << data[1] << endl; //1
	cout << "temp_data[1] = " << temp_data[1] << endl; //1
	cout << "temp_data[5] = " << temp_data[5] << endl; //22 veriyor artık çünkü temp_data[5] = 22 yapmıştk
	cout << "data[4] = " << data[4] << endl; //4
	cout << "data[5] = " << data[5] << endl; //22

	------------------

	Burada anlatmak istediğim şey şu, 2. fonksiyona bakarsan her şey çok daha hızlı şekilde yapılır.1.fonksiyonda
kopyalama işlemi yapılacak atama işlemi yapılacak return işlemi yapılacak sonra bide mainde bunu değişkene vermek
için bir atama işlemi daha yapacaksın ve düşünki bunu milisaniyelerde yapman lazım uçağa giden füzeye yön veriyorsun
diyelim hızlıca yapmak için direk 2. fonksiyon gibi yapılar kullanmak gerekir.2. fonksiyonda kopyalama return atama
işlemleri yapılmaz çünkü direk o adresteki değerde değişimler hızlıca yapılır.

int yonHesapla(int x)
{
	//hesaplar yapıldı
	x = 22;
		return x_;
}

void yonHesapla2(int* p)
{
	//hesaplar yapıldı
	*p = 30;
}

int main()
{
	int a = 55;
	a = yonHesapla(a);
	cout << a << endl;
	yonHesapla2(&a);
	cout << a << endl;

	-----------
	
	ref ornegi aşağıda
	void fonk(int &x) //tek bir deger için reference örnegimiz direk değişkenin adresini yolladık
{
	x = 2 * x_;
}


*/
----------------------------------------------

EKSIKLER

* SOLID PRINCIPLES öğren

* Classta dinamik dizi oluştur sonra bir nesne ile bir nesneyi toplayıp yeni bir nesne oluşması fonksi
yonunu yaz 

* 2 boyutlu dizileri 2 boyutlu pointerlar ile temsil etmek ve new delete komutunu onlara etkin bir şekilde
kullanmak aşağıda onunla ilgili örnek yapıyoruz devam ettirirsin
int a[3][3];
	for (int i = 0; i < 3; i++)
	{	
		for (int j = 0; j < 3; j++)
		{
			a[i][j] = j;
		}
	}

	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			cout << a[i][j] << " ";
		}
		cout << "" << endl;
	}

	int (*p)[3] = a;
	cout << p + 1;

	* String sınıfının fonksiyonları ile birlikte etkin kullanımı - Dosya işlemleri 

	* Ogün birinci 49-52

------------------------------------



